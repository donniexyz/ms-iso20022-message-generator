/*
 * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 * SPDX-License-Identifier: MIT-0
 */
plugins {
    // common build conventions for all rapide projects
    id 'rapide.commons'
    id 'application'
    id 'org.springframework.boot' version '3.2.1'
    id 'com.adarshr.test-logger' version '3.0.0'
}

group = "${group}.pacs008-message-generator"
version = '1.0.0-SNAPSHOT'

ext {
    springBootVersion = '3.2.1'
}

springBoot {
    mainClass.set('rapide.iso20022.cli.RapideCLIApplication')
}

dependencies {
    implementation platform("org.springframework.boot:org.springframework.boot.gradle.plugin:${springBootVersion}")
    implementation platform("org.springframework.boot:spring-boot-dependencies:${springBootVersion}")

    // Shouldn't require spring boot version, it should be come from platform but it doesn't work
    compileOnly "org.springframework.boot:spring-boot-configuration-processor:${springBootVersion}"
//    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor:${springBootVersion}"

    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'info.picocli:picocli-spring-boot-starter:4.7.4'
    implementation 'com.h2database:h2:1.4.200'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

tasks.withType(JavaCompile) {
    doFirst {
        println "AnnotationProcessorPath for $name is ${options.getAnnotationProcessorPath().getFiles()}"
    }
}

bootJar {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}